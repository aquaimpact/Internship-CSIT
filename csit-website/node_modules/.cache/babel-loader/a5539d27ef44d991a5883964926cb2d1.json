{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\MainMap.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5,\n      movements: []\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n  }\n\n  getDatetime(datetime, selection) {\n    // 20/7/2020 8:00\n    let date = datetime.split(\" \");\n    let fulldate = date[0].split(\"/\");\n    let mon = fulldate[1];\n    let day = fulldate[0];\n    let year = fulldate[2];\n    let fullTime = date[1].split(\":\");\n    let hh = fullTime[0];\n    let min = fullTime[1]; // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    let finalDatetime;\n\n    if (selection == \"d\") {\n      finalDatetime = day + \" \" + shortmonthNames[parseInt(mon) - 1] + \" \" + year;\n    } else if (selection == \"t\") {\n      let timing = \"AM\";\n\n      if (parseInt(hh) == 12) {\n        timing = \"PM\";\n      }\n\n      if (parseInt(hh) > 12) {\n        hh = parseInt(hh) - 12;\n        timing = \"PM\";\n      }\n\n      finalDatetime = hh + \":\" + min + \" \" + timing;\n    } // else if(selection == \"dt\"){\n    //     finalDatetime = new Date(datetime)\n    // }\n\n\n    return finalDatetime;\n  }\n\n  componentDidUpdate() {\n    if (this.props.profile.length > 0 && this.props.movement.length > 0) {\n      // console.log(this.props.profile)\n      // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\n      let mappedResults = this.props.profile.map(x => {\n        return {\n          profile: x,\n          movements: this.props.movement.filter(xx => xx.suspectId == x.id)\n        };\n      });\n      map.on('load', function () {\n        mappedResults.forEach(e => {\n          let Imgids = Math.random().toString();\n          let UPoints = e.movements.map(x => {\n            return {\n              'type': 'Feature',\n              'properties': {\n                'movementID': x.id,\n                'enter': x.datetimeEntered,\n                'leave': x.datetimeLeft,\n                'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\n              },\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [x.locationLong, x.locationLat]\n              }\n            };\n          });\n          let UMovements = this.state.movements.map(x => {\n            return [x.locationLong, x.locationLat];\n          });\n          map.loadImage('https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png', // Add an image to use as a custom marker\n          function (error, image) {\n            if (error) throw error;\n            map.addImage('custom-marker', image);\n            map.addSource('places', {\n              'type': 'geojson',\n              'data': {\n                'type': 'FeatureCollection',\n                'features': UPoints\n              }\n            }); // Add a layer showing the places.\n\n            map.addLayer({\n              'id': 'places',\n              'type': 'symbol',\n              'source': 'places',\n              'layout': {\n                // \"line-cap\": \"round\",\n                // \"line-join\": \"round\"\n                'icon-image': 'custom-marker',\n                'icon-allow-overlap': true\n              }\n            });\n            map.addSource('route', {\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                  'type': 'LineString',\n                  'coordinates': UMovements\n                }\n              }\n            });\n            map.addLayer({\n              'id': 'route',\n              'type': 'line',\n              'source': 'route',\n              'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n              },\n              'paint': {\n                'line-color': '#888',\n                'line-width': 8\n              }\n            });\n          });\n        }); // Create a popup, but don't add it to the map yet.\n\n        var popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n        map.on('click', 'places', function (e) {\n          var description = e.features[0].properties.description;\n          var movementID = e.features[0].properties.movementID;\n          var enter = e.features[0].properties.enter;\n          var leave = e.features[0].properties.leave; // console.log(movementID)\n\n          that.getPeople(movementID, enter, leave);\n        });\n        map.on('mouseenter', 'places', function (e) {\n          // Change the cursor style as a UI indicator.\n          map.getCanvas().style.cursor = 'pointer';\n          var coordinates = e.features[0].geometry.coordinates.slice();\n          var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          } // Populate the popup and set its coordinates\n          // based on the feature found.\n\n\n          popup.setLngLat(coordinates).setHTML(description).addTo(map);\n        });\n        map.on('mouseleave', 'places', function () {\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/MainMap.js"],"names":["React","mapboxgl","accessToken","map","MainMap","Component","constructor","props","state","lng","lat","zoom","movements","mapContainer","createRef","componentDidMount","Map","container","style","center","getDatetime","datetime","selection","date","split","fulldate","mon","day","year","fullTime","hh","min","shortmonthNames","finalDatetime","parseInt","timing","componentDidUpdate","profile","length","movement","mappedResults","x","filter","xx","suspectId","id","on","forEach","e","Imgids","Math","random","toString","UPoints","datetimeEntered","datetimeLeft","locationShortaddress","locationLong","locationLat","UMovements","loadImage","error","image","addImage","addSource","addLayer","popup","Popup","closeButton","closeOnClick","description","features","properties","movementID","enter","leave","that","getPeople","getCanvas","cursor","coordinates","geometry","slice","abs","lngLat","setLngLat","setHTML","addTo","remove","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\n\r\nclass MainMap extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n            movements:[],\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n    }\r\n\r\n    getDatetime(datetime, selection){\r\n\r\n        // 20/7/2020 8:00\r\n        let date = datetime.split(\" \")\r\n        let fulldate = date[0].split(\"/\")\r\n        \r\n\r\n        let mon = fulldate[1]\r\n        let day = fulldate[0]\r\n        let year = fulldate[2]\r\n        let fullTime = date[1].split(\":\")\r\n        let hh = fullTime[0]\r\n        let min = fullTime[1]\r\n\r\n        // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n        let finalDatetime\r\n        if(selection == \"d\"){\r\n            finalDatetime = day + \" \" + shortmonthNames[parseInt(mon)-1] + \" \" + year\r\n        }\r\n        else if(selection == \"t\"){\r\n            let timing = \"AM\"\r\n            if(parseInt(hh) == 12){\r\n                timing = \"PM\"\r\n            }\r\n            if(parseInt(hh) > 12){\r\n                hh = parseInt(hh) - 12\r\n                timing = \"PM\"\r\n            }\r\n            finalDatetime = hh + \":\" + min + \" \" + timing\r\n        }\r\n        // else if(selection == \"dt\"){\r\n        //     finalDatetime = new Date(datetime)\r\n        // }\r\n        return finalDatetime\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.props.profile.length > 0 && this.props.movement.length > 0){\r\n\r\n            // console.log(this.props.profile)\r\n\r\n            // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\r\n            let mappedResults = this.props.profile.map(x => {\r\n                return({\r\n                    profile: x,\r\n                    movements: this.props.movement.filter(xx => xx.suspectId == x.id)\r\n                })\r\n            })\r\n\r\n            map.on('load', function() {\r\n\r\n                mappedResults.forEach(e => {\r\n\r\n                    let Imgids = Math.random().toString()\r\n\r\n                    let UPoints = e.movements.map(x => {\r\n                        return({\r\n                            'type': 'Feature',\r\n                            'properties': {\r\n                                'movementID': x.id,\r\n                                'enter': x.datetimeEntered,\r\n                                'leave': x.datetimeLeft,\r\n                                'description':\r\n                                    `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\r\n                                },\r\n                            'geometry': {\r\n                                'type': 'Point',\r\n                                'coordinates': [x.locationLong, x.locationLat]\r\n                            }\r\n                        })\r\n                    })\r\n    \r\n                    let UMovements = this.state.movements.map(x => {\r\n                        return([x.locationLong, x.locationLat])\r\n                    })\r\n    \r\n                    map.loadImage(\r\n                        'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\r\n                        // Add an image to use as a custom marker\r\n                        function(error, image) {\r\n                            if (error) throw error;\r\n                            map.addImage('custom-marker', image);\r\n                         \r\n                            map.addSource('places', {\r\n                                'type': 'geojson',\r\n                                'data': {\r\n                                    'type': 'FeatureCollection',\r\n                                    'features': UPoints\r\n                                }\r\n                            });\r\n                         \r\n                            // Add a layer showing the places.\r\n                            map.addLayer({\r\n                                'id': 'places',\r\n                                'type': 'symbol',\r\n                                'source': 'places',\r\n                                'layout': {\r\n                                    // \"line-cap\": \"round\",\r\n                                    // \"line-join\": \"round\"\r\n                                    'icon-image': 'custom-marker',\r\n                                    'icon-allow-overlap': true\r\n                                }\r\n                            });\r\n            \r\n                            map.addSource('route', {\r\n                                'type': 'geojson',\r\n                                'data': {\r\n                                    'type': 'Feature',\r\n                                    'properties': {},\r\n                                    'geometry': {\r\n                                        'type': 'LineString',\r\n                                        'coordinates': UMovements\r\n                                    }\r\n                                }\r\n                            });\r\n                            \r\n                            map.addLayer({\r\n                                'id': 'route',\r\n                                'type': 'line',\r\n                                'source': 'route',\r\n                                'layout': {\r\n                                    'line-join': 'round',\r\n                                    'line-cap': 'round'\r\n                                },\r\n                                'paint': {\r\n                                    'line-color': '#888',\r\n                                    'line-width': 8\r\n                                }\r\n                            });\r\n            \r\n                        });\r\n                });\r\n                 \r\n                // Create a popup, but don't add it to the map yet.\r\n                var popup = new mapboxgl.Popup({\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n                \r\n                map.on('click', 'places', function(e){\r\n                    var description = e.features[0].properties.description;\r\n                    var movementID = e.features[0].properties.movementID;\r\n                    var enter = e.features[0].properties.enter;\r\n                    var leave = e.features[0].properties.leave;\r\n                    // console.log(movementID)\r\n                    that.getPeople(movementID, enter, leave)\r\n                });\r\n    \r\n                map.on('mouseenter', 'places', function(e) {\r\n                    // Change the cursor style as a UI indicator.\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                    \r\n                    var coordinates = e.features[0].geometry.coordinates.slice();\r\n                    var description = e.features[0].properties.description;\r\n                    \r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n                    \r\n                    // Populate the popup and set its coordinates\r\n                    // based on the feature found.\r\n                    popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n                });\r\n                 \r\n                map.on('mouseleave', 'places', function() {\r\n                    map.getCanvas().style.cursor = '';\r\n                    popup.remove();\r\n                });\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainMap"]},"metadata":{},"sourceType":"module"}