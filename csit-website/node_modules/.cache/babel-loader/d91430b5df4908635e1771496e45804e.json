{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\maps.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5,\n      movements: [],\n      maps: {}\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  getMovements(id) {\n    fetch(`http://localhost:8080/getMovementbyID?IDs=${id}`).then(r => r.json()).then(data => this.setState({\n      movements: data\n    }));\n  }\n\n  componentDidMount() {\n    this.getMovements(this.props.UID);\n  }\n\n  getDatetime(datetime, selection) {\n    console.log(datetime);\n    date = new Date(datetime).get; // if(selection == \"d\"){\n    // }\n\n    console.log(date);\n    return datetime;\n  }\n\n  componentDidUpdate() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    let UPoints = this.state.movements.map(x => {\n      return {\n        'type': 'Feature',\n        'properties': {\n          'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered)}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft)}</p>`\n        },\n        'geometry': {\n          'type': 'Point',\n          'coordinates': [x.locationLong, x.locationLat]\n        }\n      };\n    });\n    let UMovements = this.state.movements.map(x => {\n      return [x.locationLong, x.locationLat];\n    });\n    map.on('load', function () {\n      map.loadImage('https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png', // Add an image to use as a custom marker\n      function (error, image) {\n        if (error) throw error;\n        map.addImage('custom-marker', image);\n        map.addSource('places', {\n          'type': 'geojson',\n          'data': {\n            'type': 'FeatureCollection',\n            'features': UPoints\n          }\n        }); // Add a layer showing the places.\n\n        map.addLayer({\n          'id': 'places',\n          'type': 'symbol',\n          'source': 'places',\n          'layout': {\n            'icon-image': 'custom-marker',\n            'icon-allow-overlap': true\n          }\n        });\n        map.addSource('route', {\n          'type': 'geojson',\n          'data': {\n            'type': 'Feature',\n            'properties': {},\n            'geometry': {\n              'type': 'LineString',\n              'coordinates': UMovements\n            }\n          }\n        });\n        map.addLayer({\n          'id': 'route',\n          'type': 'line',\n          'source': 'route',\n          'layout': {\n            'line-join': 'round',\n            'line-cap': 'round'\n          },\n          'paint': {\n            'line-color': '#888',\n            'line-width': 8\n          }\n        });\n      }); // Create a popup, but don't add it to the map yet.\n\n      var popup = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false\n      });\n      map.on('mouseenter', 'places', function (e) {\n        // Change the cursor style as a UI indicator.\n        map.getCanvas().style.cursor = 'pointer';\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        } // Populate the popup and set its coordinates\n        // based on the feature found.\n\n\n        popup.setLngLat(coordinates).setHTML(description).addTo(map);\n      });\n      map.on('mouseleave', 'places', function () {\n        map.getCanvas().style.cursor = '';\n        popup.remove();\n      });\n    });\n  }\n\n  render() {\n    // console.log(this.props.UID)\n    // map = this.state.maps\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/maps.js"],"names":["React","mapboxgl","accessToken","Maps","Component","constructor","props","state","lng","lat","zoom","movements","maps","mapContainer","createRef","getMovements","id","fetch","then","r","json","data","setState","componentDidMount","UID","getDatetime","datetime","selection","console","log","date","Date","get","componentDidUpdate","map","Map","container","style","center","UPoints","x","locationShortaddress","datetimeEntered","datetimeLeft","locationLong","locationLat","UMovements","on","loadImage","error","image","addImage","addSource","addLayer","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","coordinates","features","geometry","slice","description","properties","Math","abs","lngLat","setLngLat","setHTML","addTo","remove","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nclass Maps extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n            movements:[],\r\n            maps:{},\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n        \r\n    }\r\n\r\n    getMovements(id){\r\n        fetch(`http://localhost:8080/getMovementbyID?IDs=${id}`).then(r => r.json()).then(data => this.setState({movements:data}))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovements(this.props.UID)\r\n    }\r\n\r\n    getDatetime(datetime, selection){\r\n        console.log(datetime)\r\n        date = new Date(datetime).get\r\n        // if(selection == \"d\"){\r\n\r\n        // }\r\n        console.log(date)\r\n        return datetime\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        const map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n\r\n        let UPoints = this.state.movements.map(x => {\r\n            return({\r\n                'type': 'Feature',\r\n                'properties': {\r\n                    'description':\r\n                        `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered)}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft)}</p>`\r\n                    },\r\n                'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [x.locationLong, x.locationLat]\r\n                }\r\n            })\r\n        })\r\n\r\n        let UMovements = this.state.movements.map(x => {\r\n            return([x.locationLong, x.locationLat])\r\n        })\r\n\r\n        map.on('load', function() {\r\n\r\n            map.loadImage(\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\r\n            // Add an image to use as a custom marker\r\n            function(error, image) {\r\n                if (error) throw error;\r\n                map.addImage('custom-marker', image);\r\n             \r\n                map.addSource('places', {\r\n                    'type': 'geojson',\r\n                    'data': {\r\n                        'type': 'FeatureCollection',\r\n                        'features': UPoints\r\n                    }\r\n                });\r\n             \r\n                // Add a layer showing the places.\r\n                map.addLayer({\r\n                    'id': 'places',\r\n                    'type': 'symbol',\r\n                    'source': 'places',\r\n                    'layout': {\r\n                        'icon-image': 'custom-marker',\r\n                        'icon-allow-overlap': true\r\n                    }\r\n                });\r\n\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': {\r\n                        'type': 'Feature',\r\n                        'properties': {},\r\n                        'geometry': {\r\n                            'type': 'LineString',\r\n                            'coordinates': UMovements\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                        'line-join': 'round',\r\n                        'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                        'line-color': '#888',\r\n                        'line-width': 8\r\n                    }\r\n                });\r\n\r\n            });\r\n             \r\n            // Create a popup, but don't add it to the map yet.\r\n            var popup = new mapboxgl.Popup({\r\n                closeButton: false,\r\n                closeOnClick: false\r\n            });\r\n             \r\n            map.on('mouseenter', 'places', function(e) {\r\n                // Change the cursor style as a UI indicator.\r\n                map.getCanvas().style.cursor = 'pointer';\r\n                \r\n                var coordinates = e.features[0].geometry.coordinates.slice();\r\n                var description = e.features[0].properties.description;\r\n                \r\n                // Ensure that if the map is zoomed out such that multiple\r\n                // copies of the feature are visible, the popup appears\r\n                // over the copy being pointed to.\r\n                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                }\r\n                \r\n                // Populate the popup and set its coordinates\r\n                // based on the feature found.\r\n                popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n            });\r\n             \r\n            map.on('mouseleave', 'places', function() {\r\n                map.getCanvas().style.cursor = '';\r\n                popup.remove();\r\n            });\r\n        });\r\n    }\r\n\r\n    render(){\r\n        // console.log(this.props.UID)\r\n        \r\n\r\n        // map = this.state.maps\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Maps"]},"metadata":{},"sourceType":"module"}