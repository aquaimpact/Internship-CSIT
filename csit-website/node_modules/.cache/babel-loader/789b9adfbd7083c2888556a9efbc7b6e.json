{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\MainMap.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5,\n      movements: []\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {}\n\n  getDatetime(datetime, selection) {\n    // 20/7/2020 8:00\n    date = datetime.split(\" \");\n    fulldate = date[0].split(\"/\");\n    let mon = fulldate[1];\n    let day = fulldate[0];\n    let year = fulldate[2];\n    let fullTime = date[1].split(\":\");\n    let hh = fullTime[0];\n    let min = fullTime[1]; // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]; // let finalDatetime\n\n    if (selection == \"d\") {\n      finalDatetime = day + \" \" + shortmonthNames[parseInt(mon) - 1] + \" \" + year;\n    } else if (selection == \"t\") {\n      let timing = \"AM\";\n\n      if (parseInt(hh) == 12) {\n        timing = \"PM\";\n      }\n\n      if (parseInt(hh) > 12) {\n        hh = parseInt(hh) - 12;\n        timing = \"PM\";\n      }\n\n      finalDatetime = hh + \":\" + min + \" \" + timing;\n    } // else if(selection == \"dt\"){\n    //     finalDatetime = new Date(datetime)\n    // }\n\n\n    return finalDatetime;\n  }\n\n  componentDidUpdate() {\n    if (this.props.profile.length > 0 && this.props.movement.length > 0) {\n      // console.log(this.props.profile)\n      // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\n      let mappedResults = this.props.profile.map(x => {\n        return {\n          profile: x,\n          movements: this.props.movement.filter(xx => xx.suspectId == x.id)\n        };\n      });\n      mappedResults.forEach(e => {\n        let UPoints = e.movements.map(x => {\n          return {\n            'type': 'Feature',\n            'properties': {\n              'movementID': x.id,\n              'enter': x.datetimeEntered,\n              'leave': x.datetimeLeft,\n              'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\n            },\n            'geometry': {\n              'type': 'Point',\n              'coordinates': [x.locationLong, x.locationLat]\n            }\n          };\n        });\n        console.log(e.movements);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/MainMap.js"],"names":["React","mapboxgl","accessToken","map","MainMap","Component","constructor","props","state","lng","lat","zoom","movements","mapContainer","createRef","componentDidMount","getDatetime","datetime","selection","date","split","fulldate","mon","day","year","fullTime","hh","min","shortmonthNames","finalDatetime","parseInt","timing","componentDidUpdate","profile","length","movement","mappedResults","x","filter","xx","suspectId","id","forEach","e","UPoints","datetimeEntered","datetimeLeft","locationShortaddress","locationLong","locationLat","console","log","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\n\r\nclass MainMap extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n            movements:[],\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n       \r\n    }\r\n\r\n    getDatetime(datetime, selection){\r\n\r\n        // 20/7/2020 8:00\r\n        date = datetime.split(\" \")\r\n        fulldate = date[0].split(\"/\")\r\n        \r\n\r\n        let mon = fulldate[1]\r\n        let day = fulldate[0]\r\n        let year = fulldate[2]\r\n        let fullTime = date[1].split(\":\")\r\n        let hh = fullTime[0]\r\n        let min = fullTime[1]\r\n\r\n        // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n        // let finalDatetime\r\n        if(selection == \"d\"){\r\n            finalDatetime = day + \" \" + shortmonthNames[parseInt(mon)-1] + \" \" + year\r\n        }\r\n        else if(selection == \"t\"){\r\n            let timing = \"AM\"\r\n            if(parseInt(hh) == 12){\r\n                timing = \"PM\"\r\n            }\r\n            if(parseInt(hh) > 12){\r\n                hh = parseInt(hh) - 12\r\n                timing = \"PM\"\r\n            }\r\n            finalDatetime = hh + \":\" + min + \" \" + timing\r\n        }\r\n        // else if(selection == \"dt\"){\r\n        //     finalDatetime = new Date(datetime)\r\n        // }\r\n        return finalDatetime\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.props.profile.length > 0 && this.props.movement.length > 0){\r\n\r\n            // console.log(this.props.profile)\r\n\r\n            // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\r\n            let mappedResults = this.props.profile.map(x => {\r\n                return({\r\n                    profile: x,\r\n                    movements: this.props.movement.filter(xx => xx.suspectId == x.id)\r\n                })\r\n            })\r\n\r\n            mappedResults.forEach(e => {\r\n                let UPoints = e.movements.map(x => {\r\n                    return({\r\n                        'type': 'Feature',\r\n                        'properties': {\r\n                            'movementID': x.id,\r\n                            'enter': x.datetimeEntered,\r\n                            'leave': x.datetimeLeft,\r\n                            'description':\r\n                                `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\r\n                            },\r\n                        'geometry': {\r\n                            'type': 'Point',\r\n                            'coordinates': [x.locationLong, x.locationLat]\r\n                        }\r\n                    })\r\n                })\r\n\r\n                console.log(e.movements)\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainMap"]},"metadata":{},"sourceType":"module"}