{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\MainMap.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5,\n      movements: []\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    if (this.props.profile.length > 0 && this.props.movement.length > 0) {\n      // console.log(this.props.profile)\n      // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\n      let mappedResults = this.props.profile.map(x => {\n        return {\n          profile: x,\n          movements: this.props.movement.filter(xx => xx.suspectId == x.id)\n        };\n      });\n      console.log(\"Yay-1\");\n      map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      map.on('load', function () {\n        console.log(\"Yay1\");\n        map.loadImage('https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png', // Add an image to use as a custom marker\n        function (error, image) {\n          if (error) throw error;\n          console.log(mappedResults); // console.log(x.movement)\n\n          mappedResults.foreach(x => {\n            let customMarker = Math.random().toString();\n            map.addImage(customMarker, image);\n            let UPoints = x.movement.map(xx => {\n              return {\n                'type': 'Feature',\n                'properties': {\n                  'movementID': xx.id,\n                  'enter': xx.datetimeEntered,\n                  'leave': xx.datetimeLeft,\n                  'description': `<strong>${xx.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(xx.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(xx.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(xx.datetimeLeft, 'd')}</p>`\n                },\n                'geometry': {\n                  'type': 'Point',\n                  'coordinates': [xx.locationLong, xx.locationLat]\n                }\n              };\n            });\n            map.addSource('places', {\n              'type': 'geojson',\n              'data': {\n                'type': 'FeatureCollection',\n                'features': UPoints\n              }\n            }); // Add a layer showing the places.\n\n            map.addLayer({\n              'id': 'places',\n              'type': 'symbol',\n              'source': 'places',\n              'layout': {\n                // \"line-cap\": \"round\",\n                // \"line-join\": \"round\"\n                'icon-image': customMarker,\n                'icon-allow-overlap': true\n              }\n            });\n            let UMovements = x.movement.map(xx => {\n              return [xx.locationLong, xx.locationLat];\n            });\n            map.addSource('route', {\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                  'type': 'LineString',\n                  'coordinates': UMovements\n                }\n              }\n            });\n            map.addLayer({\n              'id': 'route',\n              'type': 'line',\n              'source': 'route',\n              'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n              },\n              'paint': {\n                'line-color': '#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0'),\n                'line-width': 8\n              }\n            });\n          });\n        }); // Create a popup, but don't add it to the map yet.\n\n        var popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        }); // map.on('click', 'places', function(e){\n        //     var description = e.features[0].properties.description;\n        //     var movementID = e.features[0].properties.movementID;\n        //     var enter = e.features[0].properties.enter;\n        //     var leave = e.features[0].properties.leave;\n        //     // console.log(movementID)\n        //     that.getPeople(movementID, enter, leave)\n        // });\n\n        map.on('mouseenter', 'places', function (e) {\n          // Change the cursor style as a UI indicator.\n          map.getCanvas().style.cursor = 'pointer';\n          var coordinates = e.features[0].geometry.coordinates.slice();\n          var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          } // Populate the popup and set its coordinates\n          // based on the feature found.\n\n\n          popup.setLngLat(coordinates).setHTML(description).addTo(map);\n        });\n        map.on('mouseleave', 'places', function () {\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/MainMap.js"],"names":["React","mapboxgl","accessToken","map","MainMap","Component","constructor","props","state","lng","lat","zoom","movements","mapContainer","createRef","componentDidMount","componentDidUpdate","profile","length","movement","mappedResults","x","filter","xx","suspectId","id","console","log","Map","container","style","center","on","loadImage","error","image","foreach","customMarker","Math","random","toString","addImage","UPoints","datetimeEntered","datetimeLeft","locationShortaddress","getDatetime","locationLong","locationLat","addSource","addLayer","UMovements","padStart","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","coordinates","features","geometry","slice","description","properties","abs","lngLat","setLngLat","setHTML","addTo","remove","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\n\r\nclass MainMap extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n            movements:[],\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n       \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.props.profile.length > 0 && this.props.movement.length > 0){\r\n\r\n            // console.log(this.props.profile)\r\n\r\n            // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\r\n            let mappedResults = this.props.profile.map(x => {\r\n                return({\r\n                    profile: x,\r\n                    movements: this.props.movement.filter(xx => xx.suspectId == x.id)\r\n                })\r\n            })\r\n\r\n            console.log(\"Yay-1\")\r\n\r\n            map = new mapboxgl.Map({\r\n                container: this.mapContainer,\r\n                style: 'mapbox://styles/mapbox/streets-v11',\r\n                center: [this.state.lng, this.state.lat],\r\n                zoom: this.state.zoom\r\n            });\r\n    \r\n            map.on('load', function() {\r\n                \r\n                console.log(\"Yay1\")\r\n                map.loadImage(\r\n                'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\r\n                // Add an image to use as a custom marker\r\n                function(error, image) {\r\n                    if (error) throw error;\r\n\r\n                    console.log(mappedResults)\r\n                    // console.log(x.movement)\r\n                    mappedResults.foreach(x => {\r\n\r\n                        let customMarker = Math.random().toString()\r\n\r\n                        map.addImage(customMarker, image);\r\n\r\n                        let UPoints = x.movement.map(xx => {\r\n                            return({\r\n                                'type': 'Feature',\r\n                                'properties': {\r\n                                    'movementID': xx.id,\r\n                                    'enter': xx.datetimeEntered,\r\n                                    'leave': xx.datetimeLeft,\r\n                                    'description':\r\n                                        `<strong>${xx.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(xx.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(xx.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(xx.datetimeLeft, 'd')}</p>`\r\n                                    },\r\n                                'geometry': {\r\n                                    'type': 'Point',\r\n                                    'coordinates': [xx.locationLong, xx.locationLat]\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        \r\n\r\n                        map.addSource('places', {\r\n                            'type': 'geojson',\r\n                            'data': {\r\n                                'type': 'FeatureCollection',\r\n                                'features': UPoints\r\n                            }\r\n                        });\r\n\r\n                        // Add a layer showing the places.\r\n                        map.addLayer({\r\n                            'id': 'places',\r\n                            'type': 'symbol',\r\n                            'source': 'places',\r\n                            'layout': {\r\n                                // \"line-cap\": \"round\",\r\n                                // \"line-join\": \"round\"\r\n                                'icon-image': customMarker,\r\n                                'icon-allow-overlap': true\r\n                            }\r\n                        });\r\n\r\n                        let UMovements = x.movement.map(xx => {\r\n                            return([xx.locationLong, xx.locationLat])\r\n                        })\r\n        \r\n                        map.addSource('route', {\r\n                            'type': 'geojson',\r\n                            'data': {\r\n                                'type': 'Feature',\r\n                                'properties': {},\r\n                                'geometry': {\r\n                                    'type': 'LineString',\r\n                                    'coordinates': UMovements\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        map.addLayer({\r\n                            'id': 'route',\r\n                            'type': 'line',\r\n                            'source': 'route',\r\n                            'layout': {\r\n                                'line-join': 'round',\r\n                                'line-cap': 'round'\r\n                            },\r\n                            'paint': {\r\n                                'line-color': '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0'),\r\n                                'line-width': 8\r\n                            }\r\n                        });\r\n                    })\r\n                    \r\n                    \r\n    \r\n                });\r\n                 \r\n                // Create a popup, but don't add it to the map yet.\r\n                var popup = new mapboxgl.Popup({\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n                \r\n                // map.on('click', 'places', function(e){\r\n                //     var description = e.features[0].properties.description;\r\n                //     var movementID = e.features[0].properties.movementID;\r\n                //     var enter = e.features[0].properties.enter;\r\n                //     var leave = e.features[0].properties.leave;\r\n                //     // console.log(movementID)\r\n                //     that.getPeople(movementID, enter, leave)\r\n                // });\r\n    \r\n                map.on('mouseenter', 'places', function(e) {\r\n                    // Change the cursor style as a UI indicator.\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                    \r\n                    var coordinates = e.features[0].geometry.coordinates.slice();\r\n                    var description = e.features[0].properties.description;\r\n                    \r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n                    \r\n                    // Populate the popup and set its coordinates\r\n                    // based on the feature found.\r\n                    popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n                });\r\n                 \r\n                map.on('mouseleave', 'places', function() {\r\n                    map.getCanvas().style.cursor = '';\r\n                    popup.remove();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainMap"]},"metadata":{},"sourceType":"module"}