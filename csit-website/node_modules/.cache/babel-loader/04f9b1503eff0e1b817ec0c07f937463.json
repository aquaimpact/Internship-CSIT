{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\MainMap.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\nlet loaded = false;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n  }\n\n  generateColor() {\n    let n = (Math.random() * 0xfffff * 1000000).toString(16);\n    return '#' + n.slice(0, 6);\n  }\n\n  getDatetime(datetime, selection) {\n    // 20/7/2020 8:00\n    let date = datetime.split(\" \");\n    let fulldate = date[0].split(\"/\");\n    let mon = fulldate[1];\n    let day = fulldate[0];\n    let year = fulldate[2];\n    let fullTime = date[1].split(\":\");\n    let hh = fullTime[0];\n    let min = fullTime[1]; // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    let finalDatetime;\n\n    if (selection == \"d\") {\n      finalDatetime = day + \" \" + shortmonthNames[parseInt(mon) - 1] + \" \" + year;\n    } else if (selection == \"t\") {\n      let timing = \"AM\";\n\n      if (parseInt(hh) == 12) {\n        timing = \"PM\";\n      }\n\n      if (parseInt(hh) > 12) {\n        hh = parseInt(hh) - 12;\n        timing = \"PM\";\n      }\n\n      finalDatetime = hh + \":\" + min + \" \" + timing;\n    } // else if(selection == \"dt\"){\n    //     finalDatetime = new Date(datetime)\n    // }\n\n\n    return finalDatetime;\n  }\n\n  componentDidUpdate() {\n    let that = this;\n\n    if (this.props.profile.length > 0 && this.props.movement.length > 0) {\n      // console.log(this.props.profile)\n      // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\n      let mappedResults = this.props.profile.map(x => {\n        return {\n          profile: x,\n          movements: this.props.movement.filter(xx => xx.suspectId == x.id)\n        };\n      });\n      let IDsofPlaces = [];\n      mappedResults.forEach(e => {\n        let Imgids = Math.floor(Math.random() * 101);\n        let placeIDs = Math.floor(Math.random() * 101);\n        let routeIDs = Math.floor(Math.random() * 101);\n\n        while (Imgids === placeIDs || placeIDs === routeIDs || Imgids === routeIDs) {\n          Imgids = Math.floor(Math.random() * 101);\n          placeIDs = Math.floor(Math.random() * 101);\n          routeIDs = Math.floor(Math.random() * 101);\n        }\n\n        Imgids = Imgids.toString();\n        placeIDs = placeIDs.toString();\n        routeIDs = routeIDs.toString();\n        IDsofPlaces.push(placeIDs);\n        let UPoints = e.movements.map(x => {\n          return {\n            'type': 'Feature',\n            'properties': {\n              'movementID': x.id,\n              'enter': x.datetimeEntered,\n              'leave': x.datetimeLeft,\n              'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\n            },\n            'geometry': {\n              'type': 'Point',\n              'coordinates': [x.locationLong, x.locationLat]\n            }\n          };\n        });\n        let UMovements = e.movements.map(x => {\n          return [x.locationLong, x.locationLat];\n        });\n        map.loadImage('https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png', // Add an image to use as a custom marker\n        function (error, image) {\n          if (error) throw error;\n          map.addImage(Imgids, image);\n          map.addSource(routeIDs, {\n            'type': 'geojson',\n            'data': {\n              'type': 'Feature',\n              'properties': {},\n              'geometry': {\n                'type': 'LineString',\n                'coordinates': UMovements\n              }\n            }\n          });\n          let color = that.generateColor();\n          map.addLayer({\n            'id': routeIDs,\n            'type': 'line',\n            'source': routeIDs,\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': color,\n              'line-width': 8\n            }\n          });\n          map.addSource(placeIDs, {\n            'type': 'geojson',\n            'data': {\n              'type': 'FeatureCollection',\n              'features': UPoints\n            }\n          }); // Add a layer showing the places.\n\n          map.addLayer({\n            'id': placeIDs,\n            'type': 'symbol',\n            'source': placeIDs,\n            'layout': {\n              // \"line-cap\": \"round\",\n              // \"line-join\": \"round\"\n              'icon-image': Imgids,\n              'icon-allow-overlap': true\n            }\n          });\n        }); // Create a popup, but don't add it to the map yet.\n\n        var popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n        let peopleList = [];\n        map.on('click', placeIDs, function (e) {\n          // if(peopleList.length > placeIDs.length){\n          //     peopleList = []\n          // }\n          var description = e.features[0].properties.description;\n          var movementID = e.features[0].properties.movementID;\n          var enter = e.features[0].properties.enter;\n          var leave = e.features[0].properties.leave; // count += 1\n\n          let m = that.props.movement.filter(x => x.id == movementID);\n          let p = that.props.profile.filter(x => x.id == m[0].suspectId); // console.log(p)\n\n          peopleList.push(p[0]);\n          console.log(peopleList);\n          console.log(\"\"); // that.getPeople(movementID, enter, leave)\n        });\n        map.on('mouseenter', placeIDs, function (e) {\n          // Change the cursor style as a UI indicator.\n          map.getCanvas().style.cursor = 'pointer';\n          var coordinates = e.features[0].geometry.coordinates.slice();\n          var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          } // Populate the popup and set its coordinates\n          // based on the feature found.\n\n\n          popup.setLngLat(coordinates).setHTML(description).addTo(map);\n        });\n        map.on('mouseleave', placeIDs, function () {\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"700px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/MainMap.js"],"names":["React","mapboxgl","accessToken","map","loaded","MainMap","Component","constructor","props","state","lng","lat","zoom","mapContainer","createRef","componentDidMount","Map","container","style","center","generateColor","n","Math","random","toString","slice","getDatetime","datetime","selection","date","split","fulldate","mon","day","year","fullTime","hh","min","shortmonthNames","finalDatetime","parseInt","timing","componentDidUpdate","that","profile","length","movement","mappedResults","x","movements","filter","xx","suspectId","id","IDsofPlaces","forEach","e","Imgids","floor","placeIDs","routeIDs","push","UPoints","datetimeEntered","datetimeLeft","locationShortaddress","locationLong","locationLat","UMovements","loadImage","error","image","addImage","addSource","color","addLayer","popup","Popup","closeButton","closeOnClick","peopleList","on","description","features","properties","movementID","enter","leave","m","p","console","log","getCanvas","cursor","coordinates","geometry","abs","lngLat","setLngLat","setHTML","addTo","remove","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\nlet loaded = false\r\n\r\nclass MainMap extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n    }\r\n\r\n    generateColor(){\r\n        let n = (Math.random() * 0xfffff * 1000000).toString(16);\r\n        return '#' + n.slice(0, 6);\r\n    }\r\n\r\n    getDatetime(datetime, selection){\r\n\r\n        // 20/7/2020 8:00\r\n        let date = datetime.split(\" \")\r\n        let fulldate = date[0].split(\"/\")\r\n        \r\n\r\n        let mon = fulldate[1]\r\n        let day = fulldate[0]\r\n        let year = fulldate[2]\r\n        let fullTime = date[1].split(\":\")\r\n        let hh = fullTime[0]\r\n        let min = fullTime[1]\r\n\r\n        // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        const shortmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n        let finalDatetime\r\n        if(selection == \"d\"){\r\n            finalDatetime = day + \" \" + shortmonthNames[parseInt(mon)-1] + \" \" + year\r\n        }\r\n        else if(selection == \"t\"){\r\n            let timing = \"AM\"\r\n            if(parseInt(hh) == 12){\r\n                timing = \"PM\"\r\n            }\r\n            if(parseInt(hh) > 12){\r\n                hh = parseInt(hh) - 12\r\n                timing = \"PM\"\r\n            }\r\n            finalDatetime = hh + \":\" + min + \" \" + timing\r\n        }\r\n        // else if(selection == \"dt\"){\r\n        //     finalDatetime = new Date(datetime)\r\n        // }\r\n        return finalDatetime\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        let that = this\r\n        if(this.props.profile.length > 0 && this.props.movement.length > 0){\r\n\r\n            // console.log(this.props.profile)\r\n\r\n            // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\r\n            let mappedResults = this.props.profile.map(x => {\r\n                return({\r\n                    profile: x,\r\n                    movements: this.props.movement.filter(xx => xx.suspectId == x.id)\r\n                })\r\n            })\r\n\r\n            let IDsofPlaces = []\r\n            \r\n            mappedResults.forEach(e => {\r\n\r\n                let Imgids = Math.floor(Math.random() * 101)\r\n                let placeIDs = Math.floor(Math.random() * 101)\r\n                let routeIDs = Math.floor(Math.random() * 101)\r\n\r\n                while(Imgids === placeIDs || placeIDs === routeIDs || Imgids === routeIDs){\r\n                    Imgids = Math.floor(Math.random() * 101)\r\n                    placeIDs = Math.floor(Math.random() * 101)\r\n                    routeIDs = Math.floor(Math.random() * 101)\r\n                }\r\n\r\n                Imgids = Imgids.toString()\r\n                placeIDs = placeIDs.toString()\r\n                routeIDs = routeIDs.toString()\r\n\r\n                IDsofPlaces.push(placeIDs)\r\n\r\n                let UPoints = e.movements.map(x => {\r\n                    return({\r\n                        'type': 'Feature',\r\n                        'properties': {\r\n                            'movementID': x.id,\r\n                            'enter': x.datetimeEntered,\r\n                            'leave': x.datetimeLeft,\r\n                            'description':\r\n                                `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\r\n                            },\r\n                        'geometry': {\r\n                            'type': 'Point',\r\n                            'coordinates': [x.locationLong, x.locationLat]\r\n                        }\r\n                    })\r\n                })\r\n\r\n                let UMovements = e.movements.map(x => {\r\n                    return([x.locationLong, x.locationLat])\r\n                })\r\n\r\n                map.loadImage(\r\n                    'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\r\n                    // Add an image to use as a custom marker\r\n                    function(error, image) {\r\n                        if (error) throw error;\r\n                        \r\n                        map.addImage(Imgids, image);\r\n        \r\n                        map.addSource(routeIDs, {\r\n                            'type': 'geojson',\r\n                            'data': {\r\n                                'type': 'Feature',\r\n                                'properties': {},\r\n                                'geometry': {\r\n                                    'type': 'LineString',\r\n                                    'coordinates': UMovements\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        let color = that.generateColor()\r\n\r\n                        map.addLayer({\r\n                            'id': routeIDs,\r\n                            'type': 'line',\r\n                            'source': routeIDs,\r\n                            'layout': {\r\n                                'line-join': 'round',\r\n                                'line-cap': 'round'\r\n                            },\r\n                            'paint': {\r\n                                'line-color': color,\r\n                                'line-width': 8\r\n                            }\r\n                        });\r\n\r\n                        map.addSource(placeIDs, {\r\n                            'type': 'geojson',\r\n                            'data': {\r\n                                'type': 'FeatureCollection',\r\n                                'features': UPoints\r\n                            }\r\n                        });\r\n                        \r\n                        // Add a layer showing the places.\r\n                        map.addLayer({\r\n                            'id': placeIDs,\r\n                            'type': 'symbol',\r\n                            'source': placeIDs,\r\n                            'layout': {\r\n                                // \"line-cap\": \"round\",\r\n                                // \"line-join\": \"round\"\r\n                                'icon-image': Imgids,\r\n                                'icon-allow-overlap': true\r\n                            }\r\n                        });\r\n        \r\n                    });\r\n\r\n                // Create a popup, but don't add it to the map yet.\r\n                var popup = new mapboxgl.Popup({\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n\r\n                let peopleList = []\r\n                \r\n                map.on('click', placeIDs, function(e){\r\n                    \r\n                    // if(peopleList.length > placeIDs.length){\r\n                    //     peopleList = []\r\n                    // }\r\n\r\n                    var description = e.features[0].properties.description;\r\n                    var movementID = e.features[0].properties.movementID;\r\n                    var enter = e.features[0].properties.enter;\r\n                    var leave = e.features[0].properties.leave;\r\n\r\n                    // count += 1\r\n                    let m = that.props.movement.filter(x => x.id == movementID)\r\n                    let p = that.props.profile.filter(x => x.id == m[0].suspectId)\r\n                    // console.log(p)\r\n                    peopleList.push(p[0])\r\n\r\n                    console.log(peopleList)\r\n                    console.log(\"\")\r\n\r\n                    // that.getPeople(movementID, enter, leave)\r\n                });\r\n\r\n                map.on('mouseenter', placeIDs, function(e) {\r\n\r\n                    // Change the cursor style as a UI indicator.\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                    \r\n                    var coordinates = e.features[0].geometry.coordinates.slice();\r\n                    var description = e.features[0].properties.description;\r\n\r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n                    \r\n                    // Populate the popup and set its coordinates\r\n                    // based on the feature found.\r\n                    popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n                });\r\n                    \r\n                map.on('mouseleave', placeIDs, function() {\r\n                    map.getCanvas().style.cursor = '';\r\n                    popup.remove();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"700px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainMap"]},"metadata":{},"sourceType":"module"}