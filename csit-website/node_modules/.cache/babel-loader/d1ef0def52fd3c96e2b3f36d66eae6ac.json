{"ast":null,"code":"var _jsxFileName = \"G:\\\\INTERNSHIPFILES\\\\CodingFolder\\\\csit-website\\\\src\\\\Components\\\\MainMap.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 9.5,\n      movements: []\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.props.profile.length > 0 && this.props.movement.length > 0) {\n      console.log(this.props.profile); // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\n\n      let mappedResults = this.props.profile.map(x => {\n        return {\n          profile: x,\n          movements: this.props.movement.filter(xx => xx.suspectId == x.id)\n        };\n      });\n      console.log(mappedResults);\n      let UPoints = this.state.movements.map(x => {\n        return {\n          'type': 'Feature',\n          'properties': {\n            'movementID': x.id,\n            'enter': x.datetimeEntered,\n            'leave': x.datetimeLeft,\n            'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\n          },\n          'geometry': {\n            'type': 'Point',\n            'coordinates': [x.locationLong, x.locationLat]\n          }\n        };\n      });\n      let UMovements = this.state.movements.map(x => {\n        return [x.locationLong, x.locationLat];\n      });\n      let that = this;\n      map.on('load', function () {\n        map.loadImage('https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png', // Add an image to use as a custom marker\n        function (error, image) {\n          if (error) throw error;\n          map.addImage('custom-marker', image);\n          map.addSource('places', {\n            'type': 'geojson',\n            'data': {\n              'type': 'FeatureCollection',\n              'features': UPoints\n            }\n          }); // Add a layer showing the places.\n\n          map.addLayer({\n            'id': 'places',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n              // \"line-cap\": \"round\",\n              // \"line-join\": \"round\"\n              'icon-image': 'custom-marker',\n              'icon-allow-overlap': true\n            }\n          });\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': {\n              'type': 'Feature',\n              'properties': {},\n              'geometry': {\n                'type': 'LineString',\n                'coordinates': UMovements\n              }\n            }\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#888',\n              'line-width': 8\n            }\n          });\n        }); // Create a popup, but don't add it to the map yet.\n\n        var popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        }); // map.on('click', 'places', function(e){\n        //     var description = e.features[0].properties.description;\n        //     var movementID = e.features[0].properties.movementID;\n        //     var enter = e.features[0].properties.enter;\n        //     var leave = e.features[0].properties.leave;\n        //     // console.log(movementID)\n        //     that.getPeople(movementID, enter, leave)\n        // });\n\n        map.on('mouseenter', 'places', function (e) {\n          // Change the cursor style as a UI indicator.\n          map.getCanvas().style.cursor = 'pointer';\n          var coordinates = e.features[0].geometry.coordinates.slice();\n          var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          } // Populate the popup and set its coordinates\n          // based on the feature found.\n\n\n          popup.setLngLat(coordinates).setHTML(description).addTo(map);\n        });\n        map.on('mouseleave', 'places', function () {\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["G:/INTERNSHIPFILES/CodingFolder/csit-website/src/Components/MainMap.js"],"names":["React","mapboxgl","accessToken","map","MainMap","Component","constructor","props","state","lng","lat","zoom","movements","mapContainer","createRef","componentDidMount","Map","container","style","center","componentDidUpdate","profile","length","movement","console","log","mappedResults","x","filter","xx","suspectId","id","UPoints","datetimeEntered","datetimeLeft","locationShortaddress","getDatetime","locationLong","locationLat","UMovements","that","on","loadImage","error","image","addImage","addSource","addLayer","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","coordinates","features","geometry","slice","description","properties","Math","abs","lngLat","setLngLat","setHTML","addTo","remove","render","position","height","width","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\n\r\nclass MainMap extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 9.5,\r\n            movements:[],\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n        map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        if(this.props.profile.length > 0 && this.props.movement.length > 0){\r\n\r\n            console.log(this.props.profile)\r\n\r\n            // timeformat: [this.convertDate(movement.datetimeEntered),this.convertDate(movement.datetimeLeft)]\r\n            let mappedResults = this.props.profile.map(x => {\r\n                return({\r\n                    profile: x,\r\n                    movements: this.props.movement.filter(xx => xx.suspectId == x.id)\r\n                })\r\n            })\r\n\r\n            console.log(mappedResults)\r\n            \r\n            let UPoints = this.state.movements.map(x => {\r\n                return({\r\n                    'type': 'Feature',\r\n                    'properties': {\r\n                        'movementID': x.id,\r\n                        'enter': x.datetimeEntered,\r\n                        'leave': x.datetimeLeft,\r\n                        'description':\r\n                            `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\r\n                        },\r\n                    'geometry': {\r\n                        'type': 'Point',\r\n                        'coordinates': [x.locationLong, x.locationLat]\r\n                    }\r\n                })\r\n            })\r\n    \r\n            let UMovements = this.state.movements.map(x => {\r\n                return([x.locationLong, x.locationLat])\r\n            })\r\n    \r\n            let that = this\r\n    \r\n            map.on('load', function() {\r\n    \r\n                map.loadImage(\r\n                'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\r\n                // Add an image to use as a custom marker\r\n                function(error, image) {\r\n                    if (error) throw error;\r\n                    map.addImage('custom-marker', image);\r\n                 \r\n                    map.addSource('places', {\r\n                        'type': 'geojson',\r\n                        'data': {\r\n                            'type': 'FeatureCollection',\r\n                            'features': UPoints\r\n                        }\r\n                    });\r\n                 \r\n                    // Add a layer showing the places.\r\n                    map.addLayer({\r\n                        'id': 'places',\r\n                        'type': 'symbol',\r\n                        'source': 'places',\r\n                        'layout': {\r\n                            // \"line-cap\": \"round\",\r\n                            // \"line-join\": \"round\"\r\n                            'icon-image': 'custom-marker',\r\n                            'icon-allow-overlap': true\r\n                        }\r\n                    });\r\n    \r\n                    map.addSource('route', {\r\n                        'type': 'geojson',\r\n                        'data': {\r\n                            'type': 'Feature',\r\n                            'properties': {},\r\n                            'geometry': {\r\n                                'type': 'LineString',\r\n                                'coordinates': UMovements\r\n                            }\r\n                        }\r\n                    });\r\n                    \r\n                    map.addLayer({\r\n                        'id': 'route',\r\n                        'type': 'line',\r\n                        'source': 'route',\r\n                        'layout': {\r\n                            'line-join': 'round',\r\n                            'line-cap': 'round'\r\n                        },\r\n                        'paint': {\r\n                            'line-color': '#888',\r\n                            'line-width': 8\r\n                        }\r\n                    });\r\n    \r\n                });\r\n                 \r\n                // Create a popup, but don't add it to the map yet.\r\n                var popup = new mapboxgl.Popup({\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n                \r\n                // map.on('click', 'places', function(e){\r\n                //     var description = e.features[0].properties.description;\r\n                //     var movementID = e.features[0].properties.movementID;\r\n                //     var enter = e.features[0].properties.enter;\r\n                //     var leave = e.features[0].properties.leave;\r\n                //     // console.log(movementID)\r\n                //     that.getPeople(movementID, enter, leave)\r\n                // });\r\n    \r\n                map.on('mouseenter', 'places', function(e) {\r\n                    // Change the cursor style as a UI indicator.\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                    \r\n                    var coordinates = e.features[0].geometry.coordinates.slice();\r\n                    var description = e.features[0].properties.description;\r\n                    \r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n                    \r\n                    // Populate the popup and set its coordinates\r\n                    // based on the feature found.\r\n                    popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n                });\r\n                 \r\n                map.on('mouseleave', 'places', function() {\r\n                    map.getCanvas().style.cursor = '';\r\n                    popup.remove();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainMap"]},"metadata":{},"sourceType":"module"}